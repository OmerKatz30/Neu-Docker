Python REST API with Pytest and Docker
This is a simple REST API built with Python and Flask. Its primary function is to reverse the order of words in a string. The API also includes a restore feature that returns the most recent reversed string.

Getting Started
To get this project up and running, follow these simple steps.

Install Docker Desktop: This is the only prerequisite. Make sure you have Docker Desktop installed and running on your machine.

Open your terminal: Navigate to the root directory of this project.

Install Dependencies: The project uses two sets of dependencies: one for the application itself and another for the testing framework. You can install both with a single command:

pip install -r app_requirements.txt -r test_requirements.txt

Run the Test Suite: This is the final step. Running the tests will automatically build the Docker container and execute all the tests against it.

pytest tests/test_api_docker.py --junitxml=report.xml

Project Structure
app.py: The core Flask application that handles the API endpoints.

app_requirements.txt: A list of the Python packages required for the application to run (e.g., Flask, gunicorn).

test_requirements.txt: A list of the Python packages needed to run the test suites (e.g., pytest, docker).

Dockerfile: Defines the process for building the Docker image for the application.

.gitignore: Specifies files and directories that should not be committed to Git (e.g., virtual environments, test reports).

tests/: This directory contains all the test files and supporting fixtures.

conftest.py: Contains pytest fixtures for setting up the local test client and managing the Docker container's lifecycle during testing.

test_api_docker.py: The test suite that runs against the Dockerized API.

test_api_local.py: The test suite that runs directly against the application in your local environment without Docker.

API Endpoints
The application provides the following endpoints:

GET /reverse?in=<string>: Reverses the order of words in the given input string.

GET /restore: Returns the most recently reversed string.

Successful Test Result
A successful test run confirms that both the application and the Docker container are working correctly.

The terminal output will show that all tests have passed:

============================= test session starts ==============================
collected 4 items

tests/test_api_docker.py ....                                            [100%]

============================== 4 passed in 10.00s ==============================

Additionally, because the --junitxml=report.xml flag was used, a report.xml file will be created in the root directory. This file is a JUnit XML report of the test results, which can be used by continuous integration (CI) tools.